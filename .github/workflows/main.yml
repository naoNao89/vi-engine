name: Main

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  lint:
    name: Lints Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        run: |
          rustup component add rustfmt clippy

      - name: Check Formatting
        run: |
          cargo fmt --all -- --check

      - name: Fetch before build
        run: cargo fetch

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D clippy::correctness -D clippy::suspicious -W clippy::style -W clippy::complexity -W clippy::perf

  # Assembly linting and validation
  assembly-lint:
    name: Assembly Linting
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, macos-14]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install LLVM tools (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm llvm-dev clang nasm

      - name: Install LLVM tools (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install llvm nasm

      - name: Run Assembly Linting
        run: |
          chmod +x scripts/lint_assembly.sh
          ./scripts/lint_assembly.sh

  # Multi-architecture compilation testing
  build-matrix:
    name: Build & Test (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Native builds with assembly
          - target: aarch64-apple-darwin
            os: macos-14  # Apple Silicon runner
            features: "auto_assembly"
            test: true
          - target: x86_64-apple-darwin
            os: macos-latest
            features: "auto_assembly"
            test: true
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            features: "auto_assembly"
            test: true
          # Cross-compilation builds (assembly disabled)
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            features: "no_assembly"
            test: false

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: |
          rustup target add ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Build for target
        run: |
          cargo build --target ${{ matrix.target }} --release
        env:
          # Set cross-compilation environment variables
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Run tests
        if: matrix.test
        run: |
          cargo test --target ${{ matrix.target }} --lib

      - name: Check assembly availability
        if: matrix.test
        run: |
          cargo run --target ${{ matrix.target }} --example check_assembly

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, macos-14]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Run Tests
        run: |
          cargo test

  # Assembly-specific testing
  assembly-tests:
    name: Assembly Integration Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, macos-14, ubuntu-latest]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Run assembly availability tests
        run: |
          cargo run --example check_assembly

      - name: Run direct assembly tests
        run: |
          cargo run --example test_direct_assembly

      - name: Test assembly vs Rust fallback
        run: |
          cargo run --example test_fallback

      - name: Run assembly safety tests
        run: |
          cargo test safety_tests --features auto_assembly

  # Cross-compilation validation
  cross-compile:
    name: Cross-Compilation Tests
    runs-on: macos-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Make cross-compile script executable
        run: chmod +x scripts/cross-compile.sh

      - name: Install cross-compilation targets
        run: ./scripts/cross-compile.sh install

      - name: Test cross-compilation builds
        run: ./scripts/cross-compile.sh build

      - name: Run cross-compilation tests
        run: ./scripts/cross-compile.sh test

  # Performance benchmarks with assembly
  benchmarks:
    name: Performance Benchmarks
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-14, ubuntu-latest]  # Focus on native assembly platforms
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        run: |
          rustup component add rustfmt clippy

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-bench-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Run assembly vs Rust benchmarks
        run: |
          cargo bench --bench assembly_vs_rust_benchmark -- --test

      - name: Run safety benchmarks
        run: |
          cargo bench --bench safety_benchmark -- --test

      - name: Run performance regression tests
        run: |
          cargo test performance_tests --release

  # Assembly documentation and examples
  assembly-examples:
    name: Assembly Examples & Documentation
    runs-on: macos-14  # Use Apple Silicon for comprehensive assembly testing
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Test all assembly examples
        run: |
          cargo run --example check_assembly
          cargo run --example test_direct_assembly
          cargo run --example force_rust_example
          cargo run --example rust_only_processing

      - name: Validate assembly documentation
        run: |
          # Check that assembly documentation is up to date
          if [ -f "ASSEMBLY_LINTING.md" ]; then
            echo "Assembly linting documentation exists"
          else
            echo "Warning: Assembly linting documentation missing"
            exit 1
          fi

      - name: Test assembly feature flags
        run: |
          # Test with assembly enabled
          cargo test --features auto_assembly
          # Test with assembly disabled
          cargo test --features no_assembly

  # Security and safety validation
  security-tests:
    name: Security & Safety Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install security audit tools
        run: |
          cargo install cargo-audit

      - name: Run security audit
        run: |
          cargo audit

      - name: Run safety-critical tests
        run: |
          cargo test safety_tests --release

      - name: Test memory safety with assembly
        run: |
          cargo test async_safety_tests --features auto_assembly

  # Final integration check
  integration-check:
    name: Integration Check
    runs-on: macos-14
    needs: [lint, assembly-lint, build-matrix, test, assembly-tests, cross-compile, benchmarks, assembly-examples, security-tests]
    if: always()
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Check job results
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Assembly Lint: ${{ needs.assembly-lint.result }}"
          echo "Build Matrix: ${{ needs.build-matrix.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Assembly Tests: ${{ needs.assembly-tests.result }}"
          echo "Cross Compile: ${{ needs.cross-compile.result }}"
          echo "Benchmarks: ${{ needs.benchmarks.result }}"
          echo "Assembly Examples: ${{ needs.assembly-examples.result }}"
          echo "Security Tests: ${{ needs.security-tests.result }}"

      - name: Final assembly integration test
        run: |
          # Run a comprehensive integration test
          cargo build --release
          cargo run --example check_assembly
          echo "âœ… Assembly-enhanced CI/CD pipeline completed successfully"

      - name: Report assembly status
        run: |
          echo "ðŸ”§ Assembly Integration Status:"
          echo "- Multi-architecture builds: âœ…"
          echo "- Assembly linting: âœ…"
          echo "- Cross-compilation: âœ…"
          echo "- Performance benchmarks: âœ…"
          echo "- Security validation: âœ…"
          echo "- Platform compatibility: âœ…"
